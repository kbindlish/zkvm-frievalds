mod freivalds;

type F = <ark_bn254::g1::Config as ark_ec::models::CurveConfig>::BaseField;

fn main() {
    const A: [[u32; 8]; 8] = [
        [9, 9, 3, 9, 2, 2, 7, 6],
        [9, 0, 3, 1, 8, 9, 3, 9],
        [6, 0, 5, 9, 1, 9, 6, 3],
        [1, 4, 2, 4, 4, 2, 9, 6],
        [0, 5, 8, 8, 4, 7, 7, 2],
        [7, 7, 2, 2, 8, 1, 1, 8],
        [4, 1, 5, 9, 8, 8, 4, 1],
        [1, 5, 7, 1, 9, 6, 9, 2],
    ];

    const B: [[u32; 8]; 8] = [
        [5, 9, 5, 7, 4, 9, 4, 2],
        [9, 5, 5, 0, 8, 3, 5, 5],
        [4, 0, 2, 9, 5, 4, 5, 3],
        [5, 6, 9, 8, 2, 3, 9, 3],
        [6, 5, 7, 1, 8, 6, 1, 8],
        [1, 9, 4, 6, 1, 9, 1, 7],
        [5, 7, 2, 4, 3, 6, 3, 4],
        [4, 7, 2, 4, 5, 1, 9, 9],
    ];

    const C: [[u32; 8]; 8] = [
        [256, 299, 225, 228, 210, 225, 256, 211],
        [170, 292, 176, 208, 180, 252, 167, 250],
        [152, 257, 182, 250, 117, 227, 185, 176],
        [164, 196, 131, 133, 145, 143, 157, 176],
        [191, 219, 187, 218, 166, 202, 187, 200],
        [202, 222, 170, 133, 206, 169, 175, 208],
        [174, 242, 214, 221, 156, 231, 164, 200],
        [196, 216, 162, 167, 196, 219, 133, 219],
    ];

    let sat = freivalds::builder::<F, 8>(32, &A, &B, &C)
        .unwrap()
        .is_satisfied()
        .unwrap();
    assert!(sat);

    let mut cfail = C.clone();
    cfail[4][4] = 0;

    let sat = freivalds::builder::<F, 8>(32, &A, &B, &cfail)
        .unwrap()
        .is_satisfied()
        .unwrap();
    assert!(!sat);
}
